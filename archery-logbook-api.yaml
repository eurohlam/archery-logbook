openapi: 3.0.3
info:
  title: Archer's Log Book
  description: |-
    This is a springboot based REST API that helps to build a back-end for [Archer's Log Book](https://roundkick.nz) project
    Archer's Log Book helps archers to manage their rounds, bows and overall progress.
    
  license:
    name: Apache 3.0
    url: http://www.apache.org/licenses/LICENSE-3.0.html
  version: 1.0.0
servers:
  - url: https://localhost:7878
tags:
  - name: clubs
    description: management of archery clubs
  - name: archers
    description: management of archers
  - name: bows
    description: management of archer's bows
  - name: rounds
    description: management of archer's rounds
  - name: competitions
    description: management of archer's competitions

paths:
  /clubs:
    get:
      tags:
        - clubs
      summary: Get all archery clubs
      description: Returns a list of clubs
      operationId: listAllClubs
      parameters:
        - $ref: '#/components/parameters/key'
        - $ref: '#/components/parameters/nonce'
        - $ref: '#/components/parameters/timestamp'
        - $ref: '#/components/parameters/signature'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Club'
    post:
      tags:
        - clubs
      summary: Add a new archery club
      description: Add a new archery club
      operationId: addClub
      parameters:
        - $ref: '#/components/parameters/key'
        - $ref: '#/components/parameters/nonce'
        - $ref: '#/components/parameters/timestamp'
        - $ref: '#/components/parameters/signature'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Club'
      responses:
        '200':
          description: successful operation

  /clubs/{id}:
    get:
      tags:
        - clubs
      summary: Find club by ID
      description: Returns a single club
      operationId: getClub
      parameters:
        - $ref: '#/components/parameters/key'
        - $ref: '#/components/parameters/nonce'
        - $ref: '#/components/parameters/timestamp'
        - $ref: '#/components/parameters/signature'
        - name: id
          in: path
          description: ID of club to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Club'
        '404':
          description: Club not found
    delete:
      tags:
        - clubs
      summary: Deletes a club
      description: delete a club
      operationId: deleteClub
      parameters:
        - $ref: '#/components/parameters/key'
        - $ref: '#/components/parameters/nonce'
        - $ref: '#/components/parameters/timestamp'
        - $ref: '#/components/parameters/signature'
        - name: id
          in: path
          description: Club id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation

  /archers:
    get:
      tags:
        - archers
      summary: Get all archers
      description: Returns a list of archers
      operationId: listAllArchers
      parameters:
        - $ref: '#/components/parameters/key'
        - $ref: '#/components/parameters/nonce'
        - $ref: '#/components/parameters/timestamp'
        - $ref: '#/components/parameters/signature'
        - name: clubId
          in: query
          description: Club ID
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: size
          in: query
          description: Number of element in a page
          required: false
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResultPage'
    post:
      tags:
        - archers
      summary: Add a new archer
      description: Add a new archer
      operationId: addArcher
      parameters:
        - $ref: '#/components/parameters/key'
        - $ref: '#/components/parameters/nonce'
        - $ref: '#/components/parameters/timestamp'
        - $ref: '#/components/parameters/signature'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Archer'
      responses:
        '200':
          description: successful operation

  /archers/{id}:
    get:
      tags:
        - archers
      summary: Find archer by ID
      description: Returns a single archer
      operationId: getArcher
      parameters:
        - $ref: '#/components/parameters/key'
        - $ref: '#/components/parameters/nonce'
        - $ref: '#/components/parameters/timestamp'
        - $ref: '#/components/parameters/signature'
        - name: id
          in: path
          description: ID of archer to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Archer'
        '404':
          description: Archer not found
    delete:
      tags:
        - archers
      summary: Deletes an archer
      description: delete an archer
      operationId: deleteArcher
      parameters:
        - $ref: '#/components/parameters/key'
        - $ref: '#/components/parameters/nonce'
        - $ref: '#/components/parameters/timestamp'
        - $ref: '#/components/parameters/signature'
        - name: id
          in: path
          description: Archer id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation

  /archers/{id}/:
    post:
      tags:
        - archers
      summary: Update an archer
      description: Update existing archer
      operationId: updateArcher
      parameters:
        - $ref: '#/components/parameters/key'
        - $ref: '#/components/parameters/nonce'
        - $ref: '#/components/parameters/timestamp'
        - $ref: '#/components/parameters/signature'
        - name: id
          in: path
          description: Archer id to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Archer'
      responses:
        '200':
          description: successful operation
        '404':
          description: Archer not found

  /archers/{archerId}/bows:
    get:
      tags:
        - bows
      summary: Get all bows for current archer
      description: Returns a list of bows for current archer
      operationId: listAllBows
      parameters:
        - $ref: '#/components/parameters/key'
        - $ref: '#/components/parameters/nonce'
        - $ref: '#/components/parameters/timestamp'
        - $ref: '#/components/parameters/signature'
        - name: archerId
          in: path
          description: Archer ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bow'
        '404':
          description: Archer not found

  /archers/{archerId}/bows/:
    post:
      tags:
        - bows
      summary: Add a new bow for archer
      description: Add a new bow for archer
      operationId: addBow
      parameters:
        - $ref: '#/components/parameters/key'
        - $ref: '#/components/parameters/nonce'
        - $ref: '#/components/parameters/timestamp'
        - $ref: '#/components/parameters/signature'
        - name: archerId
          in: path
          description: Archer ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Bow'
      responses:
        '200':
          description: successful operation
        '404':
          description: Archer not found

  /archers/{archerId}/bows/{bowId}:
    get:
      tags:
        - bows
      summary: Find bows by ID
      description: Returns a single bow
      operationId: getBow
      parameters:
        - $ref: '#/components/parameters/key'
        - $ref: '#/components/parameters/nonce'
        - $ref: '#/components/parameters/timestamp'
        - $ref: '#/components/parameters/signature'
        - name: archerId
          in: path
          description: Archer ID
          required: true
          schema:
            type: integer
            format: int64
        - name: bowId
          in: path
          description: Bow ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bow'
        '404':
          description: Archer not found
    delete:
      tags:
        - bows
      summary: Deletes a bow
      description: delete a bow by ID
      operationId: deleteBow
      parameters:
        - $ref: '#/components/parameters/key'
        - $ref: '#/components/parameters/nonce'
        - $ref: '#/components/parameters/timestamp'
        - $ref: '#/components/parameters/signature'
        - name: archerId
          in: path
          description: Archer ID
          required: true
          schema:
            type: integer
            format: int64
        - name: bowId
          in: path
          description: Bow ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation

  /archers/{archerId}/bows/{bowId}/:
    post:
      tags:
        - bows
      summary: Update existing bow for archer
      description: Update existing bow for archer
      operationId: updateBow
      parameters:
        - $ref: '#/components/parameters/key'
        - $ref: '#/components/parameters/nonce'
        - $ref: '#/components/parameters/timestamp'
        - $ref: '#/components/parameters/signature'
        - name: archerId
          in: path
          description: Archer ID
          required: true
          schema:
            type: integer
            format: int64
        - name: bowId
          in: path
          description: Bow ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Bow'
      responses:
        '200':
          description: successful operation
        '404':
          description: Bow not found
    put:
      tags:
        - bows
      summary: Add or update DistanceSettings for existing bow
      description: Add or update DistanceSettings for existing bow
      operationId: addDistanceSettings
      parameters:
        - $ref: '#/components/parameters/key'
        - $ref: '#/components/parameters/nonce'
        - $ref: '#/components/parameters/timestamp'
        - $ref: '#/components/parameters/signature'
        - name: archerId
          in: path
          description: Archer ID
          required: true
          schema:
            type: integer
            format: int64
        - name: bowId
          in: path
          description: Bow ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DistanceSettings'
      responses:
        '200':
          description: successful operation
        '404':
          description: Bow not found

  /archers/{archerId}/rounds:
    get:
      tags:
        - rounds
      summary: Get all rounds for current archer
      description: Returns a list of rounds for current archer
      operationId: listAllRounds
      parameters:
        - $ref: '#/components/parameters/key'
        - $ref: '#/components/parameters/nonce'
        - $ref: '#/components/parameters/timestamp'
        - $ref: '#/components/parameters/signature'
        - name: archerId
          in: path
          description: Archer ID
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: size
          in: query
          description: Number of element in a page
          required: false
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/ResultPage'
        '404':
          description: Archer not found

  /archers/{archerId}/rounds/:
    post:
      tags:
        - rounds
      summary: Add a new round for current archer
      description: Adds a new round for current archer
      operationId: addRound
      parameters:
        - $ref: '#/components/parameters/key'
        - $ref: '#/components/parameters/nonce'
        - $ref: '#/components/parameters/timestamp'
        - $ref: '#/components/parameters/signature'
        - name: archerId
          in: path
          description: Archer ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Round'
      responses:
        '200':
          description: successful operation
        '404':
          description: Archer not found
        '400':
          description: Invalid Round data

  /archers/{archerId}/rounds/{roundId}:
    get:
      tags:
        - rounds
      summary: Get round by ID
      description: Returns a single round for current archer
      operationId: getRound
      parameters:
        - $ref: '#/components/parameters/key'
        - $ref: '#/components/parameters/nonce'
        - $ref: '#/components/parameters/timestamp'
        - $ref: '#/components/parameters/signature'
        - name: archerId
          in: path
          description: Archer ID
          required: true
          schema:
            type: integer
            format: int64
        - name: roundId
          in: path
          description: Round ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Round'
        '404':
          description: Round not found
    delete:
      tags:
        - rounds
      summary: Delete round by ID
      description: Delete round
      operationId: deleteRound
      parameters:
        - $ref: '#/components/parameters/key'
        - $ref: '#/components/parameters/nonce'
        - $ref: '#/components/parameters/timestamp'
        - $ref: '#/components/parameters/signature'
        - name: archerId
          in: path
          description: Archer ID
          required: true
          schema:
            type: integer
            format: int64
        - name: roundId
          in: path
          description: Round ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation

  /archers/{archerId}/competitions:
    get:
      tags:
        - competitions
      summary: Get all competitions for current archer
      description: Returns a list of competitions for current archer
      operationId: listAllCompetitions
      parameters:
        - $ref: '#/components/parameters/key'
        - $ref: '#/components/parameters/nonce'
        - $ref: '#/components/parameters/timestamp'
        - $ref: '#/components/parameters/signature'
        - name: archerId
          in: path
          description: Archer ID
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: size
          in: query
          description: Number of element in a page
          required: false
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/ResultPage'
        '404':
          description: Archer not found

  /archers/{archerId}/competitions/:
    post:
      tags:
        - competitions
      summary: Add a competition for current archer
      description: Adds a competitions for current archer
      operationId: addCompetition
      parameters:
        - $ref: '#/components/parameters/key'
        - $ref: '#/components/parameters/nonce'
        - $ref: '#/components/parameters/timestamp'
        - $ref: '#/components/parameters/signature'
        - name: archerId
          in: path
          description: Archer ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Competition'
      responses:
        '200':
          description: successful operation
        '404':
          description: Archer not found

  /archers/{archerId}/competitions/{roundId}:
    get:
      tags:
        - competitions
      summary: Get competition by ID
      description: Returns a single competition for current archer
      operationId: getCompetition
      parameters:
        - $ref: '#/components/parameters/key'
        - $ref: '#/components/parameters/nonce'
        - $ref: '#/components/parameters/timestamp'
        - $ref: '#/components/parameters/signature'
        - name: archerId
          in: path
          description: Archer ID
          required: true
          schema:
            type: integer
            format: int64
        - name: competitionId
          in: path
          description: Competition ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Competition'
        '404':
          description: Competition not found
    delete:
      tags:
        - competitions
      summary: Delete competition by ID
      description: Delete competitions
      operationId: deleteCompetition
      parameters:
        - $ref: '#/components/parameters/key'
        - $ref: '#/components/parameters/nonce'
        - $ref: '#/components/parameters/timestamp'
        - $ref: '#/components/parameters/signature'
        - name: archerId
          in: path
          description: Archer ID
          required: true
          schema:
            type: integer
            format: int64
        - name: competitionId
          in: path
          description: Competition ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation

components:
  parameters:
    key:
      in: header
      name: key
      schema:
        type: string
      example: "14524gtfd78"
      required: true
      description: unique key of client provided by API-owner. API-owner provides unique combination key/secret for every API-client
    nonce:
      in: header
      name: nonce
      schema:
        type: string
      example: "1561-3783-dgh536"
      required: true
      description: unique string generated by client for every API-call
    timestamp:
      in: header
      name: timestamp
      schema:
        type: string
      example: "20230803124567888"
      required: true
      description: timestamp for API-call
    signature:
      in: header
      name: signature
      schema:
        type: string
      example: ""
      required: true
      description: "base64 encoded string of HMAC encrypted signature with SHA-256 algorithm. Signature before encryption is made up as
a concatenation of `path + key + nonce + timestamp`"

  schemas:
    Club:
      required:
        - name
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Archery club"
        country:
          type: string
          example: "England"
        city:
          type: string
          example: "Nottingham"
        url:
          type: string
          example: "https://archeryclub.uk"
    Archer:
      required:
        - firstName
        - email
      type: object
      properties:
        id:
          type: integer
          example: 1
        firstName:
          type: string
          example: "Robin"
        lastName:
          type: string
          example: "Hood"
        email:
          type: string
          format: email
          example: "robin@hood.uk"
        club_id:
          type: number
          example: 1
        club_name:
          type: string
          example: "Archery Club"
        country:
          type: string
          example: "England"
        city:
          type: string
          example: "Nottingham"
        bowList:
          type: array
          items:
            $ref: '#/components/schemas/Bow'
        roundList:
          type: array
          items:
            $ref: '#/components/schemas/Round'
        competitionList:
          type: array
          items:
            $ref: '#/components/schemas/Competition'
    Bow:
      required:
        - name
        - type
      type: object
      properties:
        id:
          type: integer
          example: 1
        archerId:
          type: integer
          example: 1
        name:
          type: string
          example: "My bow"
        type:
          type: string
          example: "RECURVE"
          enum:
            - RECURVE
            - BAREBOW
            - LONGBOW
            - COMPOUND
            - TRADITIONAL
        level:
          type: string
          example: "ADVANCED"
          enum:
            - BEGINNER
            - INTERMEDIATE
            - ADVANCED
        poundage:
          type: string
          example: "28-30"
        compoundModel:
          type: string
          example: "Compound"
        riserModel:
          type: string
          example: "AXIOM"
        limbsModel:
          type: string
          example: "AXIOM"
        traditionalModel:
          type: string
          example: "Black"
        distanceSettingsList:
          type: array
          items:
            $ref: '#/components/schemas/DistanceSettings'
    DistanceSettings:
      required:
        - distance
        - sight
        - isTested
      type: object
      properties:
        bowId:
          type: integer
          example: 1
        distance:
          type: number
          example: 20
        sight:
          type: string
          example: "53 mm"
        isTested:
          type: boolean
    Round:
      required:
        - bowId
        - distance
        - targetFace
        - ends
      type: object
      properties:
        id:
          type: integer
          example: 1
        archerId:
          type: integer
          example: 1
        bowId:
          type: integer
          example: 1
        competitionId:
          type: integer
          example: 1
        roundDate:
          type: string
          format: dateTime
          example: "10/06/2023T23:01:18,000"
        distance:
          type: string
          example: "30"
        targetFace:
          example: "122cm"
          type: enum
            - 122cm
            - 80cm
            - 60cm
            - 40cm
            - Multi-spot
        comment:
          type: string
        country:
          type: string
          example: "England"
        city:
          type: string
          example: "Nottingham"
        ends:
          type: array
          items:
            $ref: '#/components/schemas/End'
    End:
      required:
        - endNumber
        - shots
      type: object
      properties:
        id:
          type: integer
          example: 1
        roundId:
          type: integer
          example: 1
        endNumber:
          type: integer
          example: 1
          minimum: 1
        shots:
          type: array
          items:
            $ref: '#/components/schemas/Shot'
    Shot:
      required:
        - shotNumber
        - shotScore
      type: object
      properties:
        id:
          type: integer
          example: 1
        endId:
          type: integer
          example: 1
        shotNumber:
          type: integer
          example: 3
          minimum: 1
          maximum: 6
        shotScore:
          type: integer
          example: 8
          minimum: 0
          maximum: 10
    Competition:
      required:
        - competitionType
        - rounds
      type: object
      properties:
        id:
          type: integer
          example: 1
        archerId:
          type: integer
          example: 1
        competitionType:
          type: enum
            - WA1440
            - Canadian 1200
            - Short Canadian 1200
            - Canadian 900
            - Short Canadian 900
            - Burton
            - Short Burton
            - Silver Fern
        competitionDate:
          type: string
          format: date
          example: "10-06-2023"
        competitionCountry:
          type: string
          example: "England"
        competitionCity:
          type: string
          example: "Nottingham"
        comment:
          type: string
          example: "National tournament"
        rounds:
          type: array
          items:
            $ref: '#/components/schemas/Round'
    ResultPage:
      type: object
      properties:
        pageNumber:
          type: integer
          example: 0
          minimum: 0
        totalPages:
          type: integer
          example: 5
          minimum: 1
        isFirstPage:
          type: boolean
        isLastPage:
          type: boolean
        items:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/Archer'
              - $ref: '#/components/schemas/Round'
              - $ref: '#/components/schemas/Competition'



  securitySchemes:
    api_key:
      type: apiKey
      name: signature
      in: header

security:
  - api_key: []
